
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."member_roles" AS ENUM (
    'member',
    'admin',
    'creator'
);

ALTER TYPE "public"."member_roles" OWNER TO "postgres";

CREATE TYPE "public"."message_types" AS ENUM (
    'track',
    'text',
    'image'
);

ALTER TYPE "public"."message_types" OWNER TO "postgres";

CREATE TYPE "public"."mime_types" AS ENUM (
    'image/jpeg',
    'image/jpg',
    'image/png',
    'image/gif'
);

ALTER TYPE "public"."mime_types" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."add_member_with_invite"("link" "uuid") RETURNS "text"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
declare
  channelid bigint;
begin
  select channel_id into channelid
  from channel_invites
  where channel_invites.url = link;
  if channelid is not null AND auth.uid() is not null then
    insert into members(user_id, channel_id, role)
    values(auth.uid(), channelid, 'member'::member_roles);
    return channelid;
  end if;
  RAISE EXCEPTION SQLSTATE '90001' USING MESSAGE = 'my own error';
end;
$$;

ALTER FUNCTION "public"."add_member_with_invite"("link" "uuid") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."add_member_with_invite2"("link" "uuid") RETURNS "json"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
declare
  all_channel channels;
  all_invites channel_invites;
begin
  select * into all_invites
  from channel_invites
  where channel_invites.url = link;
  if all_invites.channel_id is not null AND auth.uid() is not null then
    insert into members(user_id, channel_id, role)
    values(auth.uid(), all_invites.channel_id, 'member'::member_roles);
    
    select * into all_channel
    from channels
    where channels.id = all_invites.channel_id;
    
    return json_build_object(
      'channels',
      all_channel,
      'channel_invites',
      all_invites
    );
  end if;
  RAISE EXCEPTION SQLSTATE '90001' USING MESSAGE = 'my own error';
end;
$$;

ALTER FUNCTION "public"."add_member_with_invite2"("link" "uuid") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."create_channel"("name" "text") RETURNS "json"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
declare
  all_channel channels;
  all_channel_invite channel_invites;
  result json;
begin
  insert into channels (name, position, is_playing)
  values (name, 0, false)
  returning * into all_channel;

  insert into members (channel_id, user_id, role)
  values (all_channel.id, auth.uid(), 'creator');

  insert into channel_invites (channel_id)
  values (all_channel.id)
  returning * into all_channel_invite;

  select json_build_object('channels', all_channel, 'channel_invites', all_channel_invite) into result;

  return result;
end;
$$;

ALTER FUNCTION "public"."create_channel"("name" "text") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."is_member_of"("_user_id" "uuid") RETURNS boolean
    LANGUAGE "sql" SECURITY DEFINER
    AS $$
SELECT EXISTS (
SELECT * FROM Members WHERE channel_id IN ( SELECT Channel_id FROM Members WHERE user_id = _user_id )
);
$$;

ALTER FUNCTION "public"."is_member_of"("_user_id" "uuid") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."attachments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "message_id" bigint NOT NULL,
    "thumbnail_url" "text",
    "url" "text" NOT NULL,
    "mime_type" "public"."mime_types"
);

ALTER TABLE "public"."attachments" OWNER TO "postgres";

ALTER TABLE "public"."attachments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."attachments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."channel_invites" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "channel_id" bigint,
    "url" "uuid" DEFAULT "gen_random_uuid"()
);

ALTER TABLE "public"."channel_invites" OWNER TO "postgres";

ALTER TABLE "public"."channel_invites" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."channel_invites_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."channels" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "track" character varying DEFAULT 'nOubjLM9Cbc'::character varying NOT NULL,
    "position" real NOT NULL,
    "name" character varying NOT NULL,
    "is_playing" boolean NOT NULL
);

ALTER TABLE "public"."channels" OWNER TO "postgres";

ALTER TABLE "public"."channels" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."channels_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."members" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "channel_id" bigint NOT NULL,
    "role" "public"."member_roles" NOT NULL
);

ALTER TABLE ONLY "public"."members" REPLICA IDENTITY FULL;

ALTER TABLE "public"."members" OWNER TO "postgres";

ALTER TABLE "public"."members" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."members_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."messages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "channel_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"(),
    "content" "jsonb" NOT NULL,
    "client_id" "uuid",
    "reply_id" bigint,
    "message_type" "public"."message_types" DEFAULT 'text'::"public"."message_types" NOT NULL
);

ALTER TABLE "public"."messages" OWNER TO "postgres";

ALTER TABLE "public"."messages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."messages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "email" character varying NOT NULL,
    "avatar" character varying NOT NULL,
    "name" character varying NOT NULL
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE ONLY "public"."attachments"
    ADD CONSTRAINT "attachments_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."channel_invites"
    ADD CONSTRAINT "channel_invites_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."channel_invites"
    ADD CONSTRAINT "channel_invites_url_key" UNIQUE ("url");

ALTER TABLE ONLY "public"."channels"
    ADD CONSTRAINT "channels_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "unique_user_channel" UNIQUE ("user_id", "channel_id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_uid_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."channel_invites"
    ADD CONSTRAINT "channel_invites_channel_id_fkey" FOREIGN KEY ("channel_id") REFERENCES "public"."channels"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_channel_id_fkey" FOREIGN KEY ("channel_id") REFERENCES "public"."channels"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_channel_id_fkey" FOREIGN KEY ("channel_id") REFERENCES "public"."channels"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_reply_id_fkey" FOREIGN KEY ("reply_id") REFERENCES "public"."messages"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."attachments"
    ADD CONSTRAINT "public_attachments_message_id_fkey" FOREIGN KEY ("message_id") REFERENCES "public"."messages"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."channels" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "admins can kick members, member can leave" ON "public"."members" FOR DELETE TO "authenticated" USING (((EXISTS ( SELECT "members_1"."id",
    "members_1"."created_at",
    "members_1"."user_id",
    "members_1"."channel_id",
    "members_1"."role"
   FROM "public"."members" "members_1"
  WHERE (("members_1"."user_id" = "auth"."uid"()) AND ("members_1"."channel_id" = "members_1"."channel_id") AND ("members_1"."role" = 'creator'::"public"."member_roles")))) OR (EXISTS ( SELECT "members_1"."id",
    "members_1"."created_at",
    "members_1"."user_id",
    "members_1"."channel_id",
    "members_1"."role"
   FROM "public"."members" "members_1"
  WHERE (("members_1"."user_id" = "auth"."uid"()) AND ("members_1"."channel_id" = "members_1"."channel_id") AND ("members_1"."role" = 'admin'::"public"."member_roles") AND ("members"."role" = 'member'::"public"."member_roles")))) OR ("user_id" = "auth"."uid"())));

CREATE POLICY "allow authenticated to read invites" ON "public"."channel_invites" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id",
    "members"."role"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channel_invites"."channel_id") AND (("members"."role" = 'creator'::"public"."member_roles") OR ("members"."role" = 'admin'::"public"."member_roles"))))));

ALTER TABLE "public"."attachments" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."channel_invites" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."channels" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "creator can update roles" ON "public"."members" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT "members_1"."id",
    "members_1"."created_at",
    "members_1"."user_id",
    "members_1"."channel_id",
    "members_1"."role"
   FROM "public"."members" "members_1"
  WHERE (("members_1"."user_id" = "auth"."uid"()) AND ("members_1"."channel_id" = "members_1"."channel_id") AND ("members_1"."role" = 'creator'::"public"."member_roles"))))) WITH CHECK ((EXISTS ( SELECT "members_1"."id",
    "members_1"."created_at",
    "members_1"."user_id",
    "members_1"."channel_id",
    "members_1"."role"
   FROM "public"."members" "members_1"
  WHERE (("members_1"."user_id" = "auth"."uid"()) AND ("members_1"."channel_id" = "members_1"."channel_id") AND ("members_1"."role" = 'creator'::"public"."member_roles")))));

CREATE POLICY "enable all actions for user base on user id" ON "public"."users" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "enable auth users to read other users data except their email" ON "public"."users" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "enable channel creators or admins to add member" ON "public"."members" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT "members_1"."id",
    "members_1"."created_at",
    "members_1"."user_id",
    "members_1"."channel_id",
    "members_1"."role"
   FROM "public"."members" "members_1"
  WHERE (("members_1"."user_id" = "auth"."uid"()) AND ("members_1"."channel_id" = "members"."channel_id") AND ("members_1"."role" = ANY (ARRAY['creator'::"public"."member_roles", 'admin'::"public"."member_roles"]))))));

CREATE POLICY "enable channel members to read" ON "public"."channels" FOR SELECT TO "authenticated" USING (((EXISTS ( SELECT "members"."user_id",
    "members"."channel_id"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channels"."id")))) OR (NOT (EXISTS ( SELECT 1
   FROM "public"."members"
  WHERE ("members"."channel_id" = "channels"."id"))))));

CREATE POLICY "enable channel members to send message" ON "public"."messages" FOR INSERT WITH CHECK ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "messages"."channel_id")))));

CREATE POLICY "enable creator of channel to delete it" ON "public"."channels" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT "members"."user_id",
    "members"."channel_id",
    "members"."role"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channels"."id") AND ("members"."role" = 'creator'::"public"."member_roles")))));

CREATE POLICY "enable members user to read channel messages" ON "public"."messages" FOR SELECT USING ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "messages"."channel_id")))));

CREATE POLICY "enable user to read its own membership or its channel" ON "public"."members" FOR SELECT TO "authenticated" USING ((("user_id" = "auth"."uid"()) OR "public"."is_member_of"("auth"."uid"())));

CREATE POLICY "enbale admins to update channel" ON "public"."channels" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id",
    "members"."role"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channels"."id") AND (("members"."role" = 'creator'::"public"."member_roles") OR ("members"."role" = 'admin'::"public"."member_roles")))))) WITH CHECK ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id",
    "members"."role"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channels"."id") AND (("members"."role" = 'creator'::"public"."member_roles") OR ("members"."role" = 'admin'::"public"."member_roles"))))));

CREATE POLICY "member of a channel can upload to a channel" ON "public"."attachments" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT "members"."user_id",
    "members"."channel_id"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND (EXISTS ( SELECT "messages"."channel_id"
           FROM "public"."messages"
          WHERE ("messages"."channel_id" = "members"."channel_id")))))));

ALTER TABLE "public"."members" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."messages" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "only allow admins and creator to add invite" ON "public"."channel_invites" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id",
    "members"."role"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channel_invites"."channel_id") AND (("members"."role" = 'creator'::"public"."member_roles") OR ("members"."role" = 'admin'::"public"."member_roles"))))));

CREATE POLICY "only allow admins and creator to delete a invite" ON "public"."channel_invites" FOR DELETE USING ((EXISTS ( SELECT "members"."id",
    "members"."created_at",
    "members"."user_id",
    "members"."channel_id",
    "members"."role"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."channel_id" = "channel_invites"."channel_id") AND (("members"."role" = 'creator'::"public"."member_roles") OR ("members"."role" = 'admin'::"public"."member_roles"))))));

CREATE POLICY "only members of a channel can read its attachments" ON "public"."attachments" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT "members"."user_id",
    "members"."channel_id"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND (EXISTS ( SELECT "messages"."channel_id"
           FROM "public"."messages"
          WHERE ("messages"."channel_id" = "members"."channel_id")))))));

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."attachments";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."channels";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."members";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."messages";

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."add_member_with_invite"("link" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."add_member_with_invite"("link" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_member_with_invite"("link" "uuid") TO "service_role";

GRANT ALL ON FUNCTION "public"."add_member_with_invite2"("link" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."add_member_with_invite2"("link" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_member_with_invite2"("link" "uuid") TO "service_role";

GRANT ALL ON FUNCTION "public"."create_channel"("name" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."create_channel"("name" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_channel"("name" "text") TO "service_role";

GRANT ALL ON FUNCTION "public"."is_member_of"("_user_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."is_member_of"("_user_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_member_of"("_user_id" "uuid") TO "service_role";

GRANT ALL ON TABLE "public"."attachments" TO "anon";
GRANT ALL ON TABLE "public"."attachments" TO "authenticated";
GRANT ALL ON TABLE "public"."attachments" TO "service_role";

GRANT ALL ON SEQUENCE "public"."attachments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."attachments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."attachments_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."channel_invites" TO "anon";
GRANT ALL ON TABLE "public"."channel_invites" TO "authenticated";
GRANT ALL ON TABLE "public"."channel_invites" TO "service_role";

GRANT ALL ON SEQUENCE "public"."channel_invites_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."channel_invites_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."channel_invites_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."channels" TO "anon";
GRANT ALL ON TABLE "public"."channels" TO "authenticated";
GRANT ALL ON TABLE "public"."channels" TO "service_role";

GRANT ALL ON SEQUENCE "public"."channels_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."channels_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."channels_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."members" TO "anon";
GRANT ALL ON TABLE "public"."members" TO "authenticated";
GRANT ALL ON TABLE "public"."members" TO "service_role";

GRANT ALL ON SEQUENCE "public"."members_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."members_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."members_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."messages" TO "anon";
GRANT ALL ON TABLE "public"."messages" TO "authenticated";
GRANT ALL ON TABLE "public"."messages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."messages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."messages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."messages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
